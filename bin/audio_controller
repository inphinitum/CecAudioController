#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Copyright 2016 Javier Mart√≠nez <javi@flamingalah.net>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse

from cec_audio_controller import config_options
from cec_audio_controller import device_controller
from cec_audio_controller import event_handler


if __name__ == "__main__":
    power_on = False
    standby = False
    event_listener = False

    parser = argparse.ArgumentParser(description="Control an audio device via CEC.")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-power_on", action="store_false")
    group.add_argument("-standby", action="store_false")
    group.add_argument("-event_listener", action="store_false")
    arguments = parser.parse_args()

    with DeviceController() as controller:
        # Initialize CEC stuff and listen for events if OK
        controller = device_controller.DeviceController()

        if arguments.power_on:
            controller.power_on()
        elif arguments.standby:
            controller.standby()
        else:
            # Gather configuration options
            config = config_options.ConfigOptions()
            config.read_from_file()

            print("Initialization OK, listening for events on " + config.REST_URL)
            ev_handler = event_handler.EventHandler(controller, config)
            while True:
                ev_handler.listen_for_events()
